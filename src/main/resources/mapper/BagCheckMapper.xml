<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ist.svc.dao.BagCheckMapper">
  <resultMap id="BaseResultMap" type="com.ist.svc.domain.BagCheck">
    <id column="bag_no" jdbcType="DECIMAL" property="bagNo" />
    <result column="money" jdbcType="REAL" property="money" />
    <result column="result" jdbcType="SMALLINT" property="result" />
    <result column="draw_money" jdbcType="REAL" property="drawMoney" />
    <result column="amount" jdbcType="SMALLINT" property="amount" />
    <result column="back_money" jdbcType="REAL" property="backMoney" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    bag_no, money, `result`, draw_money, amount, back_money, createtime, updatetime
  </sql>
  <select id="selectByExample" parameterType="com.ist.svc.domain.BagCheckExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bag_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.math.BigDecimal" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bag_check
    where bag_no = #{bagNo,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.math.BigDecimal">
    delete from bag_check
    where bag_no = #{bagNo,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.ist.svc.domain.BagCheckExample">
    delete from bag_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ist.svc.domain.BagCheck">
    insert into bag_check (bag_no, money, `result`, 
      draw_money, amount, back_money, 
      createtime, updatetime)
    values (#{bagNo,jdbcType=DECIMAL}, #{money,jdbcType=REAL}, #{result,jdbcType=SMALLINT}, 
      #{drawMoney,jdbcType=REAL}, #{amount,jdbcType=SMALLINT}, #{backMoney,jdbcType=REAL}, 
      #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ist.svc.domain.BagCheck">
    insert into bag_check
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bagNo != null">
        bag_no,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="result != null">
        `result`,
      </if>
      <if test="drawMoney != null">
        draw_money,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="backMoney != null">
        back_money,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bagNo != null">
        #{bagNo,jdbcType=DECIMAL},
      </if>
      <if test="money != null">
        #{money,jdbcType=REAL},
      </if>
      <if test="result != null">
        #{result,jdbcType=SMALLINT},
      </if>
      <if test="drawMoney != null">
        #{drawMoney,jdbcType=REAL},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=SMALLINT},
      </if>
      <if test="backMoney != null">
        #{backMoney,jdbcType=REAL},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ist.svc.domain.BagCheckExample" resultType="java.lang.Long">
    select count(*) from bag_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bag_check
    <set>
      <if test="record.bagNo != null">
        bag_no = #{record.bagNo,jdbcType=DECIMAL},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=REAL},
      </if>
      <if test="record.result != null">
        `result` = #{record.result,jdbcType=SMALLINT},
      </if>
      <if test="record.drawMoney != null">
        draw_money = #{record.drawMoney,jdbcType=REAL},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=SMALLINT},
      </if>
      <if test="record.backMoney != null">
        back_money = #{record.backMoney,jdbcType=REAL},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetime != null">
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bag_check
    set bag_no = #{record.bagNo,jdbcType=DECIMAL},
      money = #{record.money,jdbcType=REAL},
      `result` = #{record.result,jdbcType=SMALLINT},
      draw_money = #{record.drawMoney,jdbcType=REAL},
      amount = #{record.amount,jdbcType=SMALLINT},
      back_money = #{record.backMoney,jdbcType=REAL},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ist.svc.domain.BagCheck">
    update bag_check
    <set>
      <if test="money != null">
        money = #{money,jdbcType=REAL},
      </if>
      <if test="result != null">
        `result` = #{result,jdbcType=SMALLINT},
      </if>
      <if test="drawMoney != null">
        draw_money = #{drawMoney,jdbcType=REAL},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=SMALLINT},
      </if>
      <if test="backMoney != null">
        back_money = #{backMoney,jdbcType=REAL},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where bag_no = #{bagNo,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ist.svc.domain.BagCheck">
    update bag_check
    set money = #{money,jdbcType=REAL},
      `result` = #{result,jdbcType=SMALLINT},
      draw_money = #{drawMoney,jdbcType=REAL},
      amount = #{amount,jdbcType=SMALLINT},
      back_money = #{backMoney,jdbcType=REAL},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where bag_no = #{bagNo,jdbcType=DECIMAL}
  </update>
</mapper>